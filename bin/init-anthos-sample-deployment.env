# This file is meant to be sourced into a bash shell for the Anthos Sample Deployment tutorial.
# Primarily for using tutorial with Cloud Shell.
# Ex: source init-anthos-sample-deployment.env

function info() {
  printf "$1\n"
}

function warn() {
  info $1
}

function error() {
  err=${1:-'error sourcing script'}
  info "${err}"
  # exit bash function stack without exiting current shell
  kill -INT $$
}

function precheck {
  if [[ ${OSTYPE} != "linux-gnu" || ${CLOUD_SHELL} != true ]]; then
    info "Warning: This has only been tested in GCP Cloud Shell. Only Linux (debian) is supported."
  fi

  command -v gcloud || (
    error "gcloud not installed, follow https://cloud.google.com/sdk/install to install it first."
  )

  command -v kubectl || (
    error "Kubectl not installed, you can run the following command to install it:\n\nsudo apt-get install kubectl"
  )

  command -v git || (
    error "git not installed, you can run the following command to install it:\n\nsudo apt-get install git"
  )

  PROJECT=$(gcloud config get-value project)
  if [[ -z ${PROJECT} ]]; then
    error "Failed to find project, please use 'gcloud config set project PROJECT_ID' to select the right project."
  fi
  export PROJECT
  info "export PROJECT as ${PROJECT}"
}

function init_kubeconfig {
  KUBECONFIG=${HOME}/.kube/${PROJECT}.anthos-trial-gcp.config
  mkdir -p "$(dirname "${KUBECONFIG}")"
  export KUBECONFIG
  info "export KUBECONFIG as ${KUBECONFIG}"

  clusters=$(gcloud container clusters list | grep -v NAME )
  echo "${clusters}" | while read -r cluster; do
    eval "$(echo "${cluster}" | awk '{print "gcloud container clusters get-credentials "$1" --zone="$2}')"
    eval "$(echo "${cluster}" | awk -v PROJECT=$PROJECT '{print "kubectl config rename-context gke_" PROJECT "_" $2 "_" $1 " " $1}')"
  done
}

function install_istioctl {
  if command -v istioctl; then
    info "istioctl already installed."
    return 0
  fi

  mkdir -p "${HOME}/bin"
  local ver=1.4.7-asm.0
  gsutil cat gs://gke-release/asm/istio-${ver}-linux.tar.gz | tar -C ${HOME}/bin/ -z -x istio-${ver}/bin/istioctl --strip-components=2
}

function install_nomos {
  if command -v nomos; then
    info "nomos already installed."
    return 0
  fi

  mkdir -p "${HOME}/bin"
  gsutil cp gs://config-management-release/released/latest/linux_amd64/nomos "${HOME}/bin/nomos"
  chmod a+x "${HOME}/bin/nomos"

  PATH=${PATH}:${HOME}/bin
  export PATH
  info "Installed nomos into ${HOME}/bin."
}

function clone_config_repo {
  local prefix="anthos-sample-deployment"
  upstream="${prefix}-config-repo"
  clone="${prefix}-config-repo"
  if [[ -d $clone ]]; then
    tempdir="/tmp/$clone-$(date +%s)"
    info "Backing up current ACM config repo ($clone) to $tempdir"
    mv $clone $tempdir 2>/dev/null || true
  fi
  gcloud source repos clone $upstream $clone 2>/dev/null \
    && info "Cloned ACM config repo: ./$clone" \
    || error "Failed to clone ACM repo: $clone"
}

precheck
init_kubeconfig
install_istioctl
install_nomos
clone_config_repo

# save context names
names=($(kubectl config get-contexts -o name))

# use first context by default
kubectl config use-context "${names[0]}"

# tutorial helper function to configure git user and name
function init_git {
  git_name=$(git config --get user.name)
  git_email=$(git config --get user.email)
  user_email=$(gcloud config list account --format "value(core.account)")
  user_name=$(echo $user_email | cut -f1 -d"@")

  if [[ -z "$git_email" ]]; then
    git config --local  user.email $user_email
    info "Configured local git user.email to $user_email"
  else
    info "Verified git user.email has been set to $git_email"
  fi
  if [[ -z "$git_name" ]]; then
    git config --local  user.name $user_name
    info "Configured local git user.name to $user_name"
  else
    info "Verified git user.name has been set to $git_name"
  fi
}

# tutorial helper function to watch nomos sync clusters
function watchmtls {
  watch -n 1 'status=$(nomos status) && printf "%s\n\n" "$status" && printf "cluster1: " && kubectl get destinationrule default -n istio-system --context '${names[0]}' -o yaml | grep "mode: "'
}
